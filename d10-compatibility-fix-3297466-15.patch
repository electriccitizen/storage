diff --git a/jsonapi_schema.info.yml b/jsonapi_schema.info.yml
index 5ad2823..a889fa4 100644
--- a/jsonapi_schema.info.yml
+++ b/jsonapi_schema.info.yml
@@ -2,7 +2,7 @@ name: JSON:API Schema
 type: module
 description: Provides schema for all JSON:API routes.
 package: Core
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
 dependencies:
   - drupal:jsonapi
   - drupal:serialization
diff --git a/src/Controller/JsonApiSchemaController.php b/src/Controller/JsonApiSchemaController.php
index 0d2c4cd..48c1353 100644
--- a/src/Controller/JsonApiSchemaController.php
+++ b/src/Controller/JsonApiSchemaController.php
@@ -116,7 +116,9 @@ class JsonApiSchemaController extends ControllerBase {
         ],
       ],
     ];
-    return CacheableJsonResponse::create($schema)->addCacheableDependency($cacheability);
+    $response = new CacheableJsonResponse($schema);
+    $response->addCacheableDependency($cacheability);
+    return $response;
   }
 
   public function getDocumentSchema(Request $request, $resource_type, $route_type) {
@@ -178,7 +180,9 @@ class JsonApiSchemaController extends ControllerBase {
         assert('not implemented');
         break;
     }
-    return CacheableJsonResponse::create($schema)->addCacheableDependency($cacheability);
+    $response = new CacheableJsonResponse($schema);
+    $response->addCacheableDependency($cacheability);
+    return $response;
   }
 
   public function getResourceObjectSchema(Request $request, $resource_type) {
@@ -205,7 +209,9 @@ class JsonApiSchemaController extends ControllerBase {
     $cacheability = new CacheableMetadata();
     $schema = $this->addFieldsSchema($schema, $resource_type);
     $schema = $this->addRelationshipsSchemaLinks($schema, $resource_type, $cacheability);
-    return CacheableJsonResponse::create($schema)->addCacheableDependency($cacheability);
+    $response = new CacheableJsonResponse($schema);
+    $response->addCacheableDependency($cacheability);
+    return $response;
   }
 
   protected function addFieldsSchema(array $schema, ResourceType $resource_type) {
diff --git a/src/Normalizer/DataDefinitionNormalizer.php b/src/Normalizer/DataDefinitionNormalizer.php
index 1a88873..d88d6c6 100644
--- a/src/Normalizer/DataDefinitionNormalizer.php
+++ b/src/Normalizer/DataDefinitionNormalizer.php
@@ -177,7 +177,7 @@ class DataDefinitionNormalizer extends NormalizerBase {
   /**
    * {@inheritdoc}
    */
-  public function supportsNormalization($data, $format = NULL) {
+  public function supportsNormalization($data, $format = NULL, array $context = []): bool {
     return parent::supportsNormalization($data, $format)
       && $data instanceof DataDefinitionInterface
       && (empty($this->supportedDataTypes) || in_array($data->getDataType(), $this->supportedDataTypes));
@@ -186,7 +186,7 @@ class DataDefinitionNormalizer extends NormalizerBase {
   /**
    * {@inheritdoc}
    */
-  public function supportsDenormalization($data, $type, $format = NULL) {
+  public function supportsDenormalization($data, $type, $format = NULL, array $context = []): bool {
     return FALSE;
   }
 
diff --git a/src/Normalizer/RelationshipFieldDefinitionNormalizer.php b/src/Normalizer/RelationshipFieldDefinitionNormalizer.php
index bc3948e..eaf787b 100644
--- a/src/Normalizer/RelationshipFieldDefinitionNormalizer.php
+++ b/src/Normalizer/RelationshipFieldDefinitionNormalizer.php
@@ -45,7 +45,7 @@ class RelationshipFieldDefinitionNormalizer extends ListDataDefinitionNormalizer
   /**
    * {@inheritdoc}
    */
-  public function supportsNormalization($data, $format = NULL) {
+  public function supportsNormalization($data, $format = NULL, array $context = []): bool {
     if (!parent::supportsNormalization($data, $format)) {
       return FALSE;
     }
diff --git a/src/Routing/Routes.php b/src/Routing/Routes.php
index 7916173..b86c0c8 100644
--- a/src/Routing/Routes.php
+++ b/src/Routing/Routes.php
@@ -8,7 +8,7 @@ use Drupal\jsonapi\ResourceType\ResourceType;
 use Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface;
 use Drupal\jsonapi\Routing\Routes as JsonApiRoutes;
 use Drupal\jsonapi_schema\Controller\JsonApiSchemaController;
-use Symfony\Cmf\Component\Routing\RouteObjectInterface;
+use Drupal\Core\Routing\RouteObjectInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\Routing\Route;
 use Symfony\Component\Routing\RouteCollection;
